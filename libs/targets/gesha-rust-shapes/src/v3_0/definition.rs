use crate::v3_0::components::core::CoreShape;
use crate::v3_0::components::request_bodies::RequestBodiesShape;
use crate::v3_0::components::schemas::SchemasShape;
use crate::v3_0::components::ComponentsShape;
use gesha_core::conversions;
use gesha_core::conversions::v3_0::COMPONENTS_PATH;
use gesha_core::conversions::{Definition, TestCase, TestSuite};
use gesha_rust_types::{ModuleDeclarations, ModuleName, NonDocComments};
use openapi_types::v3_0;
use std::fmt::Display;

pub struct RustTypes;

impl Definition for RustTypes {
    type OpenApiType = v3_0::ComponentsObject;
    type TargetType = gesha_rust_types::SourceCode;

    fn convert(this: Self::OpenApiType) -> Result<Self::TargetType, conversions::Error> {
        let shapes = ComponentsShape {
            schemas: SchemasShape::shape(this.schemas)?,
            request_bodies: RequestBodiesShape::shape(this.request_bodies)?,
            core: CoreShape::default(),
        };
        let mod_defs = shapes.into_mod_defs()?;
        Ok(new_code().set_mod_defs(mod_defs))
    }

    fn test_suites() -> Vec<TestSuite<Self::OpenApiType, Self::TargetType>> {
        vec![schemas(), request_bodies()]
    }

    fn test_suites_content(suite: &TestSuite<Self::OpenApiType, Self::TargetType>) -> impl Display {
        let decls = suite
            .test_cases
            .iter()
            .map(|case| case.module_name.clone())
            .map(ModuleName::new)
            .collect::<ModuleDeclarations>();

        new_code().set_mod_decls(decls)
    }
}

fn new_code() -> gesha_rust_types::SourceCode {
    gesha_rust_types::SourceCode::empty().set_preamble(NonDocComments::block(
        "    Generated by gesha command; DO NOT EDIT BY HAND!",
    ))
}

fn schemas() -> TestSuite<v3_0::ComponentsObject, gesha_rust_types::SourceCode> {
    let filenames = vec![
        "object_simple.yaml",
        "numeric_fields.yaml",
        "boolean_field.yaml",
        "array.yaml",
        "ref_property.yaml",
        "ref_items.yaml",
        "optional_field.yaml",
        "newtype.yaml",
        "newtype_numeric.yaml",
        "reserved_keywords.yaml",
        "enums.yaml",
        "all_of.yaml",
        "all_of_ref.yaml",
        "camel_case_fields.yaml",
        "title_description.yaml",
        "nullable_field.yaml",
        "object_inline.yaml",
        "object_inline_nested.yaml",
        "object_inline_ref.yaml",
        "object_inline_all_of.yaml",
        "object_inline_nullable.yaml",
        "all_of_inline_all_of.yaml",
        "all_of_override_optional.yaml",
        "object_inline_enum.yaml",
        "one_of.yaml",
        "object_inline_one_of.yaml",
    ];
    let parent_name = "schemas";
    create_suite(filenames, parent_name)
}

fn request_bodies() -> TestSuite<v3_0::ComponentsObject, gesha_rust_types::SourceCode> {
    let filenames = vec!["schema_ref.yaml"];
    let parent_name = "request_bodies";
    create_suite(filenames, parent_name)
}

fn create_suite(
    filenames: Vec<&str>,
    parent_name: &str,
) -> TestSuite<v3_0::ComponentsObject, gesha_rust_types::SourceCode> {
    let enclosed_cases = filenames
        .iter()
        .map(|filename| to_test_case(parent_name, filename))
        .collect();

    TestSuite {
        mod_path: format!("examples/v3_0/src/components/{parent_name}.rs").into(),
        test_cases: enclosed_cases,
    }
}

fn to_test_case(
    parent_name: &str,
    yaml_name: &str,
) -> TestCase<v3_0::ComponentsObject, gesha_rust_types::SourceCode> {
    let rs_name = yaml_name.replace(".yaml", ".rs");
    TestCase {
        output: format!("output/v3.0/components/{parent_name}/{rs_name}").into(),
        schema: format!("{COMPONENTS_PATH}/{parent_name}/{yaml_name}").into(),
        example: format!("{COMPONENTS_PATH}/{parent_name}/{rs_name}").into(),
        module_name: yaml_name.replace(".yaml", ""),
        phantom: Default::default(),
    }
}
