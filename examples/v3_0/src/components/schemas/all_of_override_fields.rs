/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Base {
        pub x1: String,
        pub x2: i64,

        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub optional_value: Option<i64>,
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Extended {
        pub x1: extended::X1,
        pub x2: i64,

        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub optional_value: Option<i64>,
    }

    pub mod extended {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub enum X1 {
            A,
            B,
        }

        gesha_macros::impl_enum!(
            impl From<X1>,
            impl TryFrom<String>,
            super::super::core::Error,
            [(A, "A"), (B, "B")],
        );
    }
}

pub mod core {

    pub type Result<A> = std::result::Result<A, Error>;

    #[derive(Debug)]
    pub enum Error {
        UnknownEnumValue {
            enum_name: &'static str,
            given: String,
        },
    }
}
