/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Sample1(Vec<sample1::Sample1Item>);
    impl From<Vec<sample1::Sample1Item>> for Sample1 {
        fn from(this: Vec<sample1::Sample1Item>) -> Self {
            Self(this)
        }
    }
    impl From<Sample1> for Vec<sample1::Sample1Item> {
        fn from(this: Sample1) -> Self {
            this.0
        }
    }

    pub mod sample1 {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub struct Sample1Item {
            #[serde(default, skip_serializing_if = "Option::is_none")]
            pub id: Option<i64>,

            #[serde(default, skip_serializing_if = "Option::is_none")]
            pub sample1_nested1: Option<sample1_item::Sample1Nested1>,
        }

        pub mod sample1_item {
            use serde::Deserialize;
            use serde::Serialize;

            #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
            pub struct Sample1Nested1 {
                pub sample1_nested2: sample1_nested1::Sample1Nested2,
            }

            pub mod sample1_nested1 {

                #[derive(Clone, Debug, PartialEq)]
                pub enum Sample1Nested2 {
                    _300,
                    Minus400,
                }

                gesha_macros::impl_enum!(
                    impl Serialize,
                    impl Deserialize,
                    Sample1Nested2 {
                        u64: [(_300, 300)],
                        i64: [(Minus400, -400)],
                    },
                );

                gesha_macros::impl_enum!(
                    impl From<Sample1Nested2>,
                    impl TryFrom<i64>,
                    super::super::super::super::core::Error,
                    [(_300, 300), (Minus400, -400)],
                );
            }
        }
    }
}

pub mod core {

    pub type Result<A> = std::result::Result<A, Error>;

    #[derive(Debug)]
    pub enum Error {
        UnknownEnumValue {
            enum_name: &'static str,
            given: String,
        },
    }
}
