/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    /**
    https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    #[serde(untagged)]
    pub enum Pet {
        Cat(Cat),
        Dog(Dog),
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Dog {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub bark: Option<bool>,
        pub breed: dog::Breed,
    }

    pub mod dog {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub enum Breed {
            Dingo,
            Husky,
            Retriever,
            Shepherd,
        }

        gesha_macros::impl_enum!(
            impl From<Breed>,
            impl TryFrom<String>,
            super::super::core::Error,
            [
                (Dingo, "Dingo"),
                (Husky, "Husky"),
                (Retriever, "Retriever"),
                (Shepherd, "Shepherd")
            ],
        );
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Cat {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub hunts: Option<bool>,
        pub age: i64,
    }
}

pub mod core {

    pub type Result<A> = std::result::Result<A, Error>;

    #[derive(Debug)]
    pub enum Error {
        UnknownEnumValue {
            enum_name: &'static str,
            given: String,
        },
    }
}
