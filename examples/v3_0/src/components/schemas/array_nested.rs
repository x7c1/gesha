/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct NumberList1(Vec<number_list1::NumberList1Item>);
    impl From<Vec<number_list1::NumberList1Item>> for NumberList1 {
        fn from(this: Vec<number_list1::NumberList1Item>) -> Self {
            Self(this)
        }
    }
    impl From<NumberList1> for Vec<number_list1::NumberList1Item> {
        fn from(this: NumberList1) -> Self {
            this.0
        }
    }

    pub mod number_list1 {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub struct NumberList1Item {
            #[serde(default, skip_serializing_if = "Option::is_none")]
            pub a1: Option<f64>,
        }
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct NumberList2(Vec<Vec<number_list2::NumberList2ItemItem>>);
    impl From<Vec<Vec<number_list2::NumberList2ItemItem>>> for NumberList2 {
        fn from(this: Vec<Vec<number_list2::NumberList2ItemItem>>) -> Self {
            Self(this)
        }
    }
    impl From<NumberList2> for Vec<Vec<number_list2::NumberList2ItemItem>> {
        fn from(this: NumberList2) -> Self {
            this.0
        }
    }

    pub mod number_list2 {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub struct NumberList2ItemItem {
            #[serde(default, skip_serializing_if = "Option::is_none")]
            pub a1: Option<f64>,
        }
    }
}
