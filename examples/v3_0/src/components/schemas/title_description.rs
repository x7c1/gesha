/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    /**
    Pet
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct OnlyTitle {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub x1: Option<i64>,
    }

    /**
    A pet for sale in the pet store
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct OnlyDescription {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub x2: Option<i64>,
    }

    /**
    Pet

    A pet for sale in the pet store
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct TitleAndDescription {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub foo: Option<i64>,
    }

    /**
    Pet

    A pet for sale in the pet store
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct WithWhiteSpaces {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub foo: Option<i64>,
    }

    /**
    Pet
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct SameText {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub bar: Option<i64>,
    }

    /**
    The quick brown fox jumps over the lazy dog.
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct HasLineBreak {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub foo: Option<i64>,
    }

    /**
    Sample1
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub enum EnumWithTitle {
        Foo,
        Bar,
    }

    gesha_macros::impl_enum!(
        impl From<EnumWithTitle>,
        impl TryFrom<String>,
        super::core::Error,
        [(Foo, "Foo"), (Bar, "Bar")],
    );

    /**
    Sample2
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct WrappedValueWithTitle(String);
    impl From<String> for WrappedValueWithTitle {
        fn from(this: String) -> Self {
            Self(this)
        }
    }
    impl From<WrappedValueWithTitle> for String {
        fn from(this: WrappedValueWithTitle) -> Self {
            this.0
        }
    }

    /**
    Sample3
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct AllOfWithTitle {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub x1: Option<i64>,

        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub x2: Option<i64>,
    }
}

pub mod core {

    pub type Result<A> = std::result::Result<A, Error>;

    #[derive(Debug)]
    pub enum Error {
        UnknownEnumValue {
            enum_name: &'static str,
            given: String,
        },
    }
}
