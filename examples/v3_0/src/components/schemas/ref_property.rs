/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Container {
        pub x0: ObjectSample,
        pub x1: NewTypeSample,
        pub x2: EnumSample,
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct ObjectSample {
        pub id: i64,
        pub name: String,
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct NewTypeSample(String);
    impl From<String> for NewTypeSample {
        fn from(this: String) -> Self {
            Self(this)
        }
    }
    impl From<NewTypeSample> for String {
        fn from(this: NewTypeSample) -> Self {
            this.0
        }
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub enum EnumSample {
        #[serde(rename = "a")]
        A,
        #[serde(rename = "b")]
        B,
        #[serde(rename = "c")]
        C,
    }

    gesha_macros::impl_enum!(
        impl From<EnumSample>,
        impl TryFrom<String>,
        super::core::Error,
        [(A, "a"), (B, "b"), (C, "c")],
    );
}

pub mod core {

    pub type Result<A> = std::result::Result<A, Error>;

    #[derive(Debug)]
    pub enum Error {
        UnknownEnumValue {
            enum_name: &'static str,
            given: String,
        },
    }
}
