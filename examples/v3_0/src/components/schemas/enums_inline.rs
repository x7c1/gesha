/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Sample1 {
        pub id: i64,
        pub sample1_nested1: sample1::Sample1Nested1,
    }

    pub mod sample1 {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub struct Sample1Nested1 {
            pub sample1_nested2: sample1_nested1::Sample1Nested2,
        }

        pub mod sample1_nested1 {

            #[derive(Clone, Debug, PartialEq)]
            pub enum Sample1Nested2 {
                _300,
                Minus400,
            }

            gesha_macros::impl_enum!(
                impl Serialize,
                impl Deserialize,
                Sample1Nested2 {
                    u64: [(_300, 300)],
                    i64: [(Minus400, -400)],
                },
            );

            gesha_macros::impl_enum!(
                impl From<Sample1Nested2>,
                impl TryFrom<i64>,
                super::super::super::core::Error,
                [(_300, 300), (Minus400, -400)],
            );
        }
    }
}

pub mod core {

    pub type Result<A> = std::result::Result<A, Error>;

    #[derive(Debug)]
    pub enum Error {
        UnknownEnumValue {
            enum_name: &'static str,
            given: String,
        },
    }
}
