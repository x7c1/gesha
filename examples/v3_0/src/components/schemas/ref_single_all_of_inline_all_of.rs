/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Foo {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub foo1: Option<foo::Foo1>,
    }

    pub mod foo {
        use serde::Deserialize;
        use serde::Serialize;

        #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
        pub struct Foo1 {
            #[serde(default, skip_serializing_if = "Option::is_none")]
            pub foo2: Option<String>,

            #[serde(default, skip_serializing_if = "Option::is_none")]
            pub foo3: Option<foo1::Foo3>,
        }

        pub mod foo1 {
            use serde::Deserialize;
            use serde::Serialize;

            #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
            pub struct Foo3 {
                #[serde(default, skip_serializing_if = "Option::is_none")]
                pub inner1: Option<String>,

                #[serde(default, skip_serializing_if = "Option::is_none")]
                pub inner2: Option<super::super::Bar>,
            }
        }
    }

    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct Bar {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub bar1: Option<String>,
    }
}
