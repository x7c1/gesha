/*
    Generated by gesha command; DO NOT EDIT BY HAND!
*/
pub mod schemas {
    use serde::Deserialize;
    use serde::Serialize;

    /**
    Pet
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct OnlyTitle {
        pub x1: Option<i64>,
    }

    /**
    A pet for sale in the pet store
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct OnlyDescription {
        pub x2: Option<i64>,
    }

    /**
    Pet

    A pet for sale in the pet store
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct TitleAndDescription {
        pub foo: Option<i64>,
    }

    /**
    Pet

    A pet for sale in the pet store
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct WithWhiteSpaces {
        pub foo: Option<i64>,
    }

    /**
    Pet
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct SameText {
        pub bar: Option<i64>,
    }

    /**
    The quick brown fox jumps over the lazy dog.
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct HasLineBreak {
        pub foo: Option<i64>,
    }

    /**
    Sample1
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub enum EnumWithTitle {
        Error1,
        Error2,
    }

    /**
    Sample2
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct WrappedValueWithTitle(String);
    impl From<String> for WrappedValueWithTitle {
        fn from(this: String) -> Self {
            Self(this)
        }
    }
    impl From<WrappedValueWithTitle> for String {
        fn from(this: WrappedValueWithTitle) -> Self {
            this.0
        }
    }

    /**
    Sample3
    */
    #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
    pub struct AllOfWithTitle {
        pub x1: Option<i64>,
        pub x2: Option<i64>,
    }
}
